---
import { getCollection } from "astro:content";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import { render } from "astro:content";

const { locale = "zh-cn" } = Astro.params;

const information = await getCollection("information");

let about-the-blog = information.find(info => info.id == "about-the-blog");
let about-me = information.find(info => info.id == "about-me");

const { Content: Introduction } = about-the-blog ? await render(about-the-blog) : ({} as any);
const { Content: Roll } = about-me ? await render(about-me) : ({} as any);

interface Chronicle {
  date: Date;
  events: string[];
}

const modules1 = import.meta.glob('$content/*.md', { eager: true });
const modules2 = import.meta.glob('$content/**/*.md', { eager: true });

const modules = { ...modules1, ...modules2 };


let chronicles: Chronicle[] = [];

for (const path in modules) {
  const mod = modules[path] as { frontmatter?: { timestamp?: string; title?: string } };
  if (!mod.frontmatter?.timestamp || !mod.frontmatter.title) continue;

  const dateKey = new Date(mod.frontmatter.timestamp).toISOString().slice(0, 10);

  const existing = chronicles.find(c => c.date.toISOString().slice(0, 10) === dateKey);
  if (existing) {
    existing.events.push(mod.frontmatter.title);
  } else {
    chronicles.push({
      date: new Date(mod.frontmatter.timestamp),
      events: [mod.frontmatter.title],
    });
  }
}

// 按日期降序排序
chronicles.sort((a, b) => b.date.getTime() - a.date.getTime());
---

<style lang="less">
	article {
		div {
			margin-bottom: 2rem;

			h1 {
				margin-bottom: 1rem;

				font-size: 1.8rem;
			}
		}
	}
</style>

<Base title="About" {locale}>
	<main class="flex flex-col sm:flex-row justify-between gap-2">
		<article class="flex flex-col">
			{
				about-the-blog && (
					<div>
						<h1>About the Blog</h1>
						<samp class="markdown">
							<Introduction />
						</samp>
					</div>
				)
			}
			{
				about-me && (
					<div>
						<h1>About Me</h1>
						<samp class="markdown">
							<Roll />
						</samp>
					</div>
				)
			}
		</article>

		<aside class="flex flex-col justify-between flex-basis-300px flex-shrink-0 mb-3 pl-5">
			<ul class="list-none">
				{
					chronicles.map(chronicle => (
						<li class="relative mb-2 pb-2 before:(absolute content-empty top-3.4 left--3.8 h-full b-l-2 b-l-solid b-primary) last:after:(absolute content-empty left--5 bottom--4 w-2 h-2 b-2 b-solid b-primary rd-full bg-primary)">
                            <span 
                                  style={{
                                    fontFamily: 'var(--monospace)',
                                    }}
                                    class="relative before:(absolute content-empty inline-block top-1 left--5 w-2 h-2 b-2 b-solid b-primary rd-full)">{Time.date(chronicle.date)}</span>
							<ul class="my-2 pl-4 list-none">
								{chronicle.events.map(event => {
									const remove = event?.match(/^~(?!~)(.*)$/);
									return <li class="relative my-1 before:(absolute content-empty inline-block top-2 left--4 w-1 h-1 b b-solid b-primary rd-full)">{remove ? <del>{remove[1]}</del> : event}</li>;
								})}
							</ul>
						</li>
					))
				}
			</ul>
		</aside>
	</main>
</Base>
