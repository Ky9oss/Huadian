---
import type { MarkdownHeading } from "astro";
import { getCollection, render } from "astro:content";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Icon from "$components/Icon.astro";
import TOC from "$components/note/TOC.astro";

export async function getStaticPaths() {
	// Get all notes excluding drafts
	const notes = await getCollection("note");

	return notes.map(note => {
		// Extract language and note ID from file path structure
		const id = note.id;

		// Generate path params with optional locale (omit for default locale)
		return { params: { id: id }, props: { note } };
	});
}

const { note } = Astro.props;

// Render markdown content and extract headings for TOC
const { Content, headings, remarkPluginFrontmatter: frontmatter } = await render(note);

// Build hierarchical table of contents from flat heading list
type Heading = MarkdownHeading & { subheadings: Heading[] };
const table_of_contents: Heading[] = [];
const stack: Heading[] = [];
for (const item of headings) {
	// Pop headings from stack that are at same or deeper level
	while (stack[stack.length - 1]?.depth >= item.depth) stack.pop();
	const heading: Heading = { ...item, subheadings: [] };

	if (stack.length > 0) {
		// Add as subheading to current parent
		const parent = stack[stack.length - 1];
		parent.subheadings.push(heading);
	} else {
		// Add as top-level heading
		table_of_contents.push(heading);
	}

	stack.push(heading);
}
---

<Base title={note.data.title} description={note.data.description} article={{ timestamp: note.data.timestamp, section: note.data.series, tags: note.data.tags }}>
	<main class="flex flex-col gap-6">
		<header class="flex flex-col gap-4">
            <script lang="ts">
            (function () {
              // 读取当前 theme（与 ThemeSwitcher 保持一致）
              function getTheme() {
                const stored = localStorage.getItem("theme");
                if (stored === "dark" || stored === "light") return stored;
                const ds = document.documentElement.dataset.theme;
                if (ds === "dark" || ds === "light") return ds;
                // fallback to prefers-color-scheme
                return (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? "dark" : "light";
              }

              function applyMediaToElement(el, theme) {
                  const id = el.id || "";
                  const media = el.getAttribute("media") || "";

                  if (id.startsWith("mermaid-dark") || media.includes("prefers-color-scheme")) {
                    const mediaMap = { dark: "all", light: "none" };
                    const newValue = mediaMap[theme] || "none";

                    // ✅ 只有当值不同的时候才设置，避免无限递归
                    if (media !== newValue) {
                      el.setAttribute("media", newValue);
                    }
                  }
                }


              function updateMermaidMediaForAll() {
                const theme = getTheme();
                // 选择器同时查找 id 开头与 style[media*=prefers-color-scheme] 的情况
                document.querySelectorAll('[id^="mermaid-dark"], style[media*="prefers-color-scheme"]').forEach(el =>
                  applyMediaToElement(el, theme)
                );
              }

              // 先尝试一次（处理已经存在的元素）
              updateMermaidMediaForAll();

              // 观察 DOM 的新增节点以及属性变动（例如 mermaid 先插入 <style> 后再设置 id/media）
              const observer = new MutationObserver(mutations => {
                const theme = getTheme();
                for (const m of mutations) {
                  if (m.type === "childList") {
                    m.addedNodes.forEach(node => {
                      if (!(node instanceof Element)) return;
                      // 如果新增的节点本身匹配
                      if (node.matches && (node.matches('[id^="mermaid-dark"]') || (node.tagName === "STYLE" && (node.getAttribute("media") || "").includes("prefers-color-scheme")))) {
                        applyMediaToElement(node, theme);
                      }
                      // 以及其后代
                      if (node.querySelectorAll) {
                        node.querySelectorAll('[id^="mermaid-dark"], style[media*="prefers-color-scheme"]').forEach(el => applyMediaToElement(el, theme));
                      }
                    });
                  } else if (m.type === "attributes") {
                    // 当某些库先插入标签再设置 id/media 时，这里也会捕获
                    const target = m.target;
                    if (target instanceof Element) applyMediaToElement(target, theme);
                  }
                }
              });

              observer.observe(document.documentElement || document, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ["id", "media"]
              });

              // 当 SPA 导航或本地存储 theme 改变时也触发一次
              document.addEventListener("astro:page-load", updateMermaidMediaForAll);
              window.addEventListener("storage", (e) => {
                if (e.key === "theme") updateMermaidMediaForAll();
              });

            })();
            </script>


			<h1 class="text-3xl">{note.data.title}</h1>
			<div class="flex flex-col gap-3 sm:flex-row children:(flex items-center gap-1 text-3.5 c-secondary)">
				<time title={Time.full(note.data.timestamp)}><Icon name="lucide:calendar" />{Time(note.data.timestamp)}</time>
				{
					note.data.series && (
						<span>
							<Icon name="lucide:layers" />
							{note.data.series}
						</span>
					)
				}
				{
					note.data.tags?.length && (
						<span>
							<Icon name="lucide:hash" />
							{note.data.tags?.join("; ")}
						</span>
					)
				}
				<span><Icon name="lucide:pilcrow" />{frontmatter.words} words </span>
			</div>
			<hr class="b-b b-b-solid b-weak" />
		</header>

		<div class="flex gap-5">
			<section id="markdown-content" class="markdown"><Content /></section>
			{
				note.data.contents && (
					<aside class="hidden sm:(block flex-shrink-0 w-200px)">
						<div class="sticky top-3 flex flex-col gap-2">
							<h3>Contents</h3>
							<nav class="overflow-y-auto">
								<TOC headings={table_of_contents} />
							</nav>
						</div>
					</aside>
				)
			}
		</div>
	</main>
</Base>
